var utils = require.call(null, __ROOT + '/../utils.js');
var lsysUtils = require.call(null, __ROOT + '/ye_utils.js');
var nnarch = require.call(null, __ROOT + '/ye_nnarch');
var _ = require.call(null, 'underscore');
var THREE = require.call(null, 'three');
var ad = require.call(null, 'adnn/ad');

/*
var readline = require.call(null, 'readline');
var rl = readline.createInterface({
  input: process.stdin,
  //input: fs.createReadStream('sensorFusionData/testMeasuresRT.txt'),
  //input: measures,
  output: process.stdout,
  terminal: false
});
*/

// ----------------------------------------------------------------------------
// Globals / constants
var sigma0 = [[0.1, 0], [0, 0.1]];
var sigma1 = [[0.01, 0], [0, 0.01]];
var sigma2 = [[0.01, 0], [0, 0.01]];

var futurePolicy = 'immediate';
// var futurePolicy = 'lifo';
// var futurePolicy = 'fifo';
// var futurePolicy = 'uniformFromAll';
// var futurePolicy = 'uniformFromDeepest';
// var futurePolicy = 'depthWeighted';
setFuturePolicy(futurePolicy);

// ----------------------------------------------------------------------------
// Factor to consider measurement of X, which are, Y and Z
var measureFactor = function(X, Y, Z) {
  factor(multivariateGaussianERP.score([X, sigma1], Y));
  factor(multivariateGaussianERP.score([X, sigma2], Z));
}

// ----------------------------------------------------------------------------
// The program itself


var makeProgram = function(neurallyGuided) {
  var verboseLog = function(verbose, content) {
    if (verbose) {
      console.log(content);
    }
  }

  //------------------------------------------------------------------------/
	// Set up ERPs (either normal or neurally-guided)
	var makeSampler = function(erpName, otherParams) {
		var erp = global[erpName + 'ERP'];
		var verp = withImportanceDist(erp, Variational[erpName + 'ERP']);
		return !neurallyGuided ? 
		function() {
      var params = arguments[0];
			return sample(erp, params);
		}
		:
		function() {
      var params = arguments[0];
			var name = arguments[1];	// TODO: replace with callsite id?
			var vparams = [globalStore.nnGuide.predict(globalStore, name), sigma0];
			verp.importanceERP.setParams(vparams);
			return sample(verp, params);
		};
	};

	var _mGaussian = makeSampler('multivariateGaussian');

  var step = function(prevX) {
    var message = {MAP: true};
    factor(0, message); //aim at get the last item in the trace? or the full trace?
    if (message.MAPparticle) {
      verboseLog(globalStore.verbose, message.MAPparticle.trace);
    }
    var message1 = {stream: true, bufSize: 8, numBufs: 4}; //get input from some stream
    factor(0, message1);
    if (globalStore.streamFuture) {
      globalStore.curY = globalStore.streamData.slice(0, 2);
      globalStore.curZ = globalStore.streamData.slice(2, 4);

      var X = _mGaussian([prevX, sigma0], 'XTrace');
      globalStore.prevX = X
      
      measureFactor(X, globalStore.curY, globalStore.curZ);
      globalStore.index += 1;

      future( function() { step(X); } );
    }
    // what about restart?
  }

	var generate = function() {
    globalStore.readingTime = 0;
    var startX = [0, 0];
    globalStore.prevX = startX;
    //globalStore.stream = {data: {}, future: true} // can this be set in inference?
    globalStore.index = 0; //temporary

    future( function() { step(globalStore.prevX) });
    finishAllFutures();
    return [globalStore.Y, globalStore.Z];
    
	};

	return generate;
}

var rets = {
	generate: makeProgram(false),
	generateGuided: makeProgram(true),
	globalStore: globalStore,
	environment: env
};
rets;
